我们都知道要访问Spring bean 我们就必须得到一个ApplicationContext 或者 BeanFactory 对象，
而ApplicationContext的BeanFactory 的子类， 拥有更强大的功能，ApplicationContext可以在服务器启动的时候自动实例化所有的bean,
而 BeanFactory只有在调用getBean()的时候才去实例化那个bean, 这也是我们为什么要得到一个ApplicationContext对象，
事实上Spring2相关的web应用默认使用的是ApplicationContext对象去实例化bean， 换一句话说，
在服务器启动的时候，Spring容器就已经实例化好了一个ApplicationContext对象，
如何才能得到一个ApplicationContext对象呢？方法很多，
最常用的办法就是用ClassPathXmlApplicationContext， FileSystemClassPathXmlApplicationContext， FileSystemXmlApplicationContext 等对象
去加载Spring配置文件，这样做也是可以， 但是在加载Spring配置文件的时候，就会生成一个新的ApplicaitonContext对象而不是Spring容器帮我们生成的那一个，
这样就产生了冗余， 所以我们在这里不采用这种加载文件的方式，我们使用 ApplicationContextAware 让Spring容器传递自己生成的ApplicationContext给我们，
然后我们把这个ApplicationContext设置成一个类的静态变量， 这样我们就随时都可以在代码里得到Application的对象了。

示例代码：
            public class ApplicationContextHelper implements ApplicationContextAware {
                private static ApplicationContext appCtx;
                /**
                * 此方法可以把ApplicationContext对象inject到当前类中作为一个静态成员变量。
                */
                @Override
                public void setApplicationContext( ApplicationContext applicationContext ) throws BeansException {
                appCtx = applicationContext;
                }
                /**
                * 这是一个便利的方法，帮助我们快速得到一个BEAN
                * @param beanName bean的名字
                * @return 返回一个bean对象
                */
                public static Object getBean( String beanName ) {
                return appCtx.getBean( beanName );
                }
            }
在容器中注册该bean：只有注册到容器中，web才会把ApplicationContext对象传递给该bean
            在applicationContext.xml中添加：
            <bean id="SpringApplicationContext" class="com.company.helper.ApplicationContextHelper"></bean>
