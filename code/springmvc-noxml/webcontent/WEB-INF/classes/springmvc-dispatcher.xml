<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">


	<!-- 配置Handler -->
	<!--name="/items1.action"：前边配置的处理器映射器为BeanNameUrlHandlerMapping， 如果请求的URL 
		为“上下文/items1.action”将会成功映射到ItemList1控制器 -->
	<bean name="/person.action"  class="com.spring.controller.PersonController" />

	<!-- 配置另外一个Handler 实现HttpRequestHandler接口的 -->
	<!-- <bean id="itemList2" class="controller.first.ItemList2" /> -->


	<!-- 处理器适配器 所有处理器适配器都实现 HandlerAdapter接口 -->
	<bean
		class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
	<!-- 另一个非注解的适配器 -->
	<bean
		class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />

	<!-- 处理器映射器 将bean的name作为url进行查找 ，需要在配置Handler时指定beanname（就是url） 所有的映射器都实现 
		HandlerMapping接口。 -->
	<bean
		class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
		<property name="order" value="1" />
	</bean>


	<!-- 视图解析器 解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包 -->
	<!--解析ModelAndView 对象的视图信息并将数据交由视图层处理 从控制器返回的ModelAndView 对象中解析出JSP（或Velocity 
		和FreeMarker模板）文件的位置，然后将数据交由解析出的视图处理 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>

	<!--简单url映射 simpleUrlHandlerMapping 是BeanNameUrlHandlerMapping 的增强版本，它可以将url 
		和 处理器bean 的id 进行统一映射配置 -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="order" value="0" /><!--定制多个映射器时需要的值，0为最高级，最优先访问 -->
		<property name="mappings">
			<props>
				<!-- 对itemsList1进行url映射，url是/items1.action -->
				<prop key="/items1.action">person</prop>
			</props>
		</property>
	</bean>
	<!--异常解析器:通过设置 “exceptionMappings”属性，使程序出现异常时，能够将其转向到指定的视图中， 以定义好的视图来显示异常信息，这样可以防止出现服务器的异常页面 -->
	<!-- <bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">error</prop>
			</props>
		</property>
	</bean> -->

	<!-- 对于注解的Handler可以单个配置 实际开发中建议使用组件扫描 -->
	<!-- <bean class="controller.first.ItemList3" /> -->
	<!-- 可以扫描controller、service、...这里让扫描controller，指定controller的包 -->
	<context:component-scan
		base-package="com.spring.controller"></context:component-scan>

	<!--注解映射器 -->
	<!-- <bean class="org.springframework.web.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
	<!--注解适配器 -->
	<!--<bean class="org.springframework.web.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->

	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器 配置mvc:annotation-driven默认加载很多的参数绑定方法，比如json转换解析器就默认加载了， 
		如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter 
		实际开发时使用mvc:annotation-driven -->
	<mvc:annotation-driven></mvc:annotation-driven>
</beans>